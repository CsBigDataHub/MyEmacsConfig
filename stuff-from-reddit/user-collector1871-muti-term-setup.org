(defun multi-term-buffer-rn ()
    "Open multi-term buffer with special name and prefix, it could be useful for custom buffer filtering (via tabs or helm)"
    (interactive)
    (require 'multi-term)
    (command-execute 'multi-term)
    (setq-default truncate-lines nil)
    (if (not (boundp 'term-number))
        (defvar term-number 1 "term index in the current emacs session") )
    (rename-buffer (concat ">" (int-to-string term-number) " term" ))
    (setq term-number (+ 1 term-number)))


(defun tabbar-buffer-tab-label (tab)
    "Return a label for TAB.
  That is, a string used to represent it on the tab bar."
    (let ((label  (if tabbar--buffer-show-groups
                      (format " [%s] " (tabbar-tab-tabset tab))
                    (format " %s " (tabbar-tab-value tab)))))
      ;; Unless the tab bar auto scrolls to keep the selected tab
      ;; visible, shorten the tab label to keep as many tabs as possible
      ;; in the visible area of the tab bar.
      (if tabbar-auto-scroll-flag
          label
        (tabbar-shorten
         label (max 1 (/ (window-width)
                         (length (tabbar-view
                                  (tabbar-current-tabset)))))))))

(defun px-tabbar-buffer-select-tab (event tab)
    "On mouse EVENT, select TAB."
    (let ((mouse-button (event-basic-type event))
          (buffer (tabbar-tab-value tab)))
      (cond
       ((eq mouse-button 'mouse-3) (with-current-buffer buffer (kill-buffer)))
       (t (switch-to-buffer buffer)))
      (tabbar-buffer-show-groups nil)))

(defun px-tabbar-buffer-help-on-tab (tab)
    "Return the help string shown when mouse is onto TAB."
    (if tabbar--buffer-show-groups
        (let* ((tabset (tabbar-tab-tabset tab))
               (tab (tabbar-selected-tab tabset)))
          (format "mouse-1: switch to buffer %S in group [%s]"
                  (buffer-name (tabbar-tab-value tab)) tabset))
      (format "\
mouse-1: switch to %S\n\
mouse-2: kill %S"
              (buffer-name (tabbar-tab-value tab))
              (buffer-name (tabbar-tab-value tab))
              (buffer-name (tabbar-tab-value tab)))))



(use-package multi-term
   :ensure t
   :config
   (setq multi-term-program "/usr/sbin/zsh")
   (setq shell-default-shell 'multi-term)
   (setq term-buffer-maximum-size 0)
 )

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init 'term)

)


(use-package tabbar
  :ensure t
  :bind
  ("<S-next>" . tabbar-backward)
  ("<S-prior>" . tabbar-forward)
  ("<drag-mouse-9>" . tabbar-press-home)
  ("<mouse-9>" . tabbar-press-home)
  ("<mouse-8>" . tabbar-backward-group)
  ("<drag-mouse-8>" . tabbar-backward-group)
  :init
  (tabbar-mode 1)
  :config
  ;;  (setq tabbar-separator (quote (1.0)))
  (defun px-tabbar-buffer-groups ()
    "Sort tab groups."
    (list (cond
    ((or (eq major-mode 'dired-mode) (string-equal "*" (substring (buffer-name) 0 1))) "EMACS")
    ((or (eq major-mode 'erc-mode) (string-equal "#" (substring (buffer-name) 0 1))) "IRC")
    ((or (eq major-mode 'pdf-view-mode)) "PDF")
    ((or (eq major-mode 'term-mode) (string-equal "<" (substring (buffer-name) 0 1))) "TERMINALS")
    (t "user")

    ))
  )

  (setq tabbar-help-on-tab-function 'px-tabbar-buffer-help-on-tab)
  (setq tabbar-select-tab-function 'px-tabbar-buffer-select-tab)
  (setq tabbar-buffer-groups-function 'px-tabbar-buffer-groups)

)


(general-define-key
   :states '(normal visual emacs insert)
   :keymaps '(term-mode-map term-raw-map)
   :major-modes 'term-mode
   "S-<up>" 'rename-buffer
   "S-<down>" 'multi-term-buffer-rn
   "S-<left>" 'multi-term-prev
   "S-<right>" 'multi-term-next
 )
