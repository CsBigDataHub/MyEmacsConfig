#+TITLE: My mail setup
#+AUTHOR: Kim ALLAMANDOLA
#+KEYWORDS: mail setup, notmuch, imapfilter, afew, mbsync
#+PROPERTY: header-args :mkdirp yes
---

* Rationale
Org-mode is an awesome way to document nearly anything including
"active"/"foreign" contents. To use this file it's only a matter
of org-babel-tangle after proper customisation.

* Mail setup description
Basically I'd like to have full control on my mails, which means
having physical messages available on my own machines locally and
act on them locally. Proper integration like being able to link a
messages or a series of messages (thread, message search etc) in
other documents etc.

Actually my setup is good enough for me despite it still miss many
little and not so little things to make me happy with it. I use it
daily and from time to time when I can invest time in improvements
or I discover new things I made changes.

Actual involved software's are:
 - [[https://notmuchmail.org/][notmuch]] for mail indexing and MUA
 - [[https://www.gnu.org/software/emacs/][emacs]] as main operating environment for anything [fn:EOE]
 - [[http://isync.sourceforge.net/][isync/mbsync]] as mail fetcher/synchronizer
 - [[https://github.com/afewmail/afew][afew]] as mails auto-refiler ([[https://github.com/lefcha/imapfilter][IMAPFilter]] in the past)
 - various small and not so small horrible scripts
 - a local maildir with a proper taxonomy

Tired of non-standard, spam-filled free mails I decide to buy one
personal with a personal domains and aliases capabilities so I can
use it without hacks and I can proper filter and handle contacts.

Aliases are very handy since I can give different mails adress to anyone,
especially to potentially spam-friendly vendors, temporary stakeholders
etc and filter instead with potentially difficult [fn:dma] subject or
~from:~ rules with far easier ~to:~ rules that remain under my control. For
instance I can give an adress like /foobar@mydomain.tld/ to a webshop for
a casual order. /foobar/ is an alias to my *real* adress, mails sent to it
arrive in my regular inbox but I can easy autofilter refiling directly
to a dedicated IMAP dir like ~vendor/blabla~ and any spam sent to /foobar/
I know came from that vendor. After the purchase is done I can simply
drop the alias and stop receiving spam.

* How it work, directly from here
Well, simply tangle relevant configs from this file to my home dir.
NixOS and Emacs will do the rest (ensure needed packages installed).
And NixOS config itself will be in org-mode, tangled from Emacs from
a custom iso with Emacs as default environment.

* Personal config
** mail sync wrapper script
A small script to wrap mbsync, notmuch, afew etc...

#+BEGIN_SRC sh :tangle ~/env/script/mailSyncWrapper :tangle-mode (identity #o755)
#! /usr/bin/env zsh
### Warning this config file is autogenerated by org-mode,
# any edit will be lost at next tangle!
# look at ~/env/org/my_mail_setup.org

# I need a display for notify-desktop notifications
export DISPLAY=:0

## pre-first thing if I'm already running I have to wait...
test `pgrep -c 'mbsync|notmuch'` -eq 0 || \
     ( notify-send "I'm already running!" ; exit 1 )

## first thing first to sync mail I need to be connected...
nm-online -x -t 0 || \
     ( notify-send "No net, cant's sync!" ; exit 2)

## now I can sync mails...
mbsync -c ~/env/mbsync/mbsyncrc -q -a 2>&1 | \
   while read ERR; do notify-send "$ERR"; done

## silently index new stuff
notmuch new

## autotag&autorefile messages
afew -d -a -t && afew -d -a -m

## and finally reindex maildir with notification!
notmuch new

#+END_SRC

** TODO evaluate lisp-based config generation for afew
And possibly other config that are tedious to write and so potentially
error prone... For instance when I tag messages from a person with many
different mail address it's tedious to write
#+BEGIN_EXAMPLE
query = from:... or to:... or from:... or to:...
#+END_EXAMPLE
with lisp I can write something like
#+BEGIN_EXAMPLE
(message (mails) tagsting refiledir)
#+END_EXAMPLE
And get it expanded with the proper query. Easier to read and to write
so less prone to error, more comfortable, easier to maintain, quicker
etc...

And it can also have the bonus to auto-generate proper [Filter.\d+]
and it can also alphabetic sort them properly!

** TODO use time-based afew tagging also to cleanup mails
To properly mark older mails &c to be deleted so to help limit maildir
growth and drop "noise" from it. For instance certain kind of messages
have few reasons to be kept for an year or two but no more, other might
be of some use for a longer time but still not forever etc...

** afew setup
Just to see what happen run afew with ~-d -v -a -m~ (move mail in
dry run mode), without ~-d~ to actually move messages...

Just for start the usual obligatory warning, with an empty line
at the end for ease readability of tangle-ed file.
#+BEGIN_SRC conf :tangle ~/.config/afew/config
### Warning this config file is autogenerated by org-mode,
# any edit will be lost at next tangle!
# look at ~/env/org/my_mail_setup.org

#+END_SRC

In the process of migrating from IMAPFilter I decide that's time to
consolidate both my mail taxonomy and my tagging strategy, in part to
effectively improve taxonomy itself, in part to adapt to afew way of
work... The afew adaption part is simple: mail move is written in the
config in a way that having there complex query and many query is
terrible to read. So I decide to tag before move and use the tag to
move messages instead of the opposite I do with IMAPFilter...

This move *might* add a nice way to autorefile messages from manually
added tags easing the refile process for casual unfiltered messages.

A small note on tagging: maildir are files in a tree not record in a
DB witch means that we normally do not want to duplicate them in the fs
despite deduplication start to be available in few fs... That's pose a
small autorefile challenge: how to refile messages that might appear in
multiple places? My personal solution if best effort for autotagging and
manually add "definitive" tag in it's needed. An example scenario I might
have correspondence from someone who write me directly but sometimes as
a stakeholder sometime for personal reasons from the very same address...
Autotagging mark any new message from him as a stakeholder, leaving of
course the message unread. When I read it if it's personal I add a tag
to mark it personal and I check for it's presence in move mode so I can
have both all tags both proper refiling of messages. It might be a source
of errors at config time since *I have to remember to add extra move rule*
for those kind of filters...

So let's start

*** ML tagging (2222 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= MLs filters =========================================================
[Filter.22221]
message = NixOS (Discourse)
query = ...
tags = +ml/NixOS;-new

[Filter.22224]
message = Notmuch
query = ...
tags = +ml/notmuch;-new

...
#+END_SRC

*** other tagging (5555 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= Others filters ======================================================
[Filter.55551]
message = Notes from BlitzMail Android app
query = from:my_mail_alias_for_that.
tags = +note;-new

[Filter.55552]
message = Sent mails personal tag
query = ...
tags = +sent

[Filter.55558]
message = RSS filtering
query = from:@rss2email.local AND tag:new
tags = +r/new;-new;-unread

#+END_SRC

*** mark for delection filters (4444 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= to deletes filters ==================================================
[Filter.44441]
message = Facebook spam
query = from:.*@facebookmail.com
tags = +spam;-new

...

#+END_SRC

*** stakeholder tagging (3333 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= stakeholders filters ================================================
[Filter.33331]
message = ...
query = ...
tags = +tag...;-new

#+END_SRC

*** vendor's tagging (6666 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= vendors filters =====================================================
[Filter.66661]
message = eBay
query = ...
tags = +v/eBay;-new

#+END_SRC

*** people's tagging (first series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
##= people's filters ====================================================
...
#+END_SRC

*** predefined filters
Since I handle mails "my way" most pre-defined filters does not fit
my desire... Some does not pose a problem, they simply do nothing in
my setup, others like ~ListMailsFilter~ pose problems since they add
tags I do not want and they run, without an official way (well, I do
not found one) to avoid they run.

For those since I can overwite defaults config to a certain extent
I simply change a parameter to make them silent...
#+BEGIN_SRC conf :tangle ~/.config/afew/config
[SpamFilter]

[ListMailsFilter]
query = 'tag:NotExistentTagToDisableThisFilter'

#+END_SRC

*** old stuff filters (9999 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
...

#+END_SRC

*** My other mail filters (8888 series)
#+BEGIN_SRC conf :tangle ~/.config/afew/config
...

#+END_SRC

*** mail refiling
Now the big mail autorefiling list, basically my mails handling model
is the so called "inbox zero" so all messages to be autorefiled normally
popup in /INBOX/ (received messages) or in /inviate/ (sent mail), filters of
that two directories are specular however I still have to find a way to
type less and avoid potential errors programmatically reversing from/to
filters... Perhaps when I lisp-ify my config...

#+BEGIN_SRC conf :tangle ~/.config/afew/config

[MailMover]
folders = subfolder/INBOX
          other/subfolder
          another/one

# required by isync/mbsync, that embed a msg UID in the mail filename
# if false (default) we end up quickly in mbsync 'UIDValidity error's
rename = True

#+END_SRC

Ok, time for the first big batch of refile instructions, syntax is a
simple ~'NotmuchQuery':targetDirUnderMailDirRoot~, to be taken into
account that ~NotmuchQuery~ is appended with ~folder:$folderName~ coming
from the lhs of the expression.
#+BEGIN_SRC conf :tangle ~/.config/afew/config
subfolder/INBOX = 'tag:to_query and not ...':path/to/refile
            'another query':another/path/to/refile/to

#+END_SRC

** notmuch setup
This is only the notmuch config, emacs part (or my notmuch UI)
is inside Emacs config. When I'll found a way to syncronize two
org heading so I can have the same config in two place also the
Emacs part will be here...

#+BEGIN_SRC conf :tangle ~/.notmuch-config
### Warning this config file is autogenerated by org-mode,
### any edit will be lost at next tangle!
### look at ~/env/org/my_mail_setup.org

[database]
path=/path/to/maildir

[new]
tags=new
ignore=.mbsyncstate;.isyncuidmap.db;.uidvalidity;.mbsyncstate.journal;.mbsyncstate.lock;.mbsyncstate.new

[search]
exclude_tags=cestino;spam

[user]
name=Main Username
primary_email=address@domain.tld
other_email=other@...;other@another ...

[maildir]
synchronize_flags=true

[crypto]
gpg_path=gpg

#+END_SRC

Another part optional to setup but that can turn out to be useful
are notmuch hooks, i.e. scripts that run before/after ~notmuch new~
invocation. Some people use a presync-hook to run ~mbsync~ for instance
others use a post-new hook to run a tagger like afew. Personally I
do not do anything for now but perhaps this will change.

This script will be run by notmuch after an insert, typically when
we send a new message from notmuch-emacs or other notmuch UI...
Useful for instance to autorefile sent message immediately.
#+NAME: ~/mail/.notmuch/hooks/post-insert
#+BEGIN_SRC sh :tangle no
#! /usr/bin/env zsh
### AUTOGENERATED script by org-mode, look at my_mail_setup.org
# This script will be lauched by notmuch after a succerfull
# message send, used to archive send-ed messages...

exit 0

#+END_SRC

This script will be run by notmuch after notmuch new returned without
error... It might be the place for a tagger script run, maybe afew
but keep in mind a thing: if in your setup you trigger a new, for
instance after an "immediate delete" of a message well... Some time
might be needed to complete this script...
#+NAME: ~/mail/.notmuch/hooks/post-new
#+BEGIN_SRC sh :tangle no
#! /usr/bin/env zsh
### AUTOGENERATED script by org-mode, look at my_mail_setup.org
# this script is launched by notmuch after a succerful
# notmuch new run, for instance to retag a refile messages
# with afew...

exit 0

#+END_SRC

This script will be run by notmuch when called as ~notmuch new~ before
actually execute the ~new~ action itself, typically the place to run
mbsync...
#+NAME: ~/mail/.notmuch/hooks/pre-new
#+BEGIN_SRC sh :tangle no
#! /usr/bin/env zsh
### AUTOGENERATED script by org-mode, look at my_mail_setup.org
# this script is called by notmuch before scanning maildir,
# usable for instance to run mbsync in a single command...

exit 0

#+END_SRC

** mbsync (isync) setup

#+BEGIN_SRC conf :tangle ~/.mbsyncrc
###
### WARNING: this file is generated by org-mode any change here
### will be otherwritten at next tangle! Look at
### ~/env/org/my_mail_setup.org
###

IMAPAccount name
Host ssl0.ovh.net
Port 993
User username
Pass ...
CertificateFile /etc/ssl/certs/ca-certificates.crt
SSLType IMAPS
AuthMechs LOGIN

IMAPStore remote
Account name

MaildirStore local
Subfolders Verbatim
Path /maildir
Inbox /maildir/INBOX

...
#+END_SRC

* footnotes
[fn:EOE] for "operating environment" I means WM (EXWM), PIM suite,
MUA, messaging suite, ... Emacs only lack a kernel and a bootloader
to be defining as operating system, that's why I call it "environment"
instead.

[fn:dma] /potentially difficult/ means that sometime the counterpart
change something from subject to adress or simply give my adress to
others so "get out" became nearly impossible practically and distinguish
who is sending me something became hard.
