#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* repos

  #+BEGIN_SRC emacs-lisp

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  #+END_SRC

* File-Exists Function
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists(f)
      "load the elip file only if it exits"
      (if (file-readable-p f)
          (load-file f)))
  ;; You can also use below
  ;;(when (file-readable-p f) (load-file p))
  #+END_SRC

* interface tweaks

  #+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-message t)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-auto-revert-mode 1)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-auto-revert-mode 1) ;; you might not want this
    (setq auto-revert-verbose nil) ;; or thiS
    ;; using swiper so ido no longer needed
    (tool-bar-mode -1)
    (winner-mode 1)
    ;;to remember window config
    ;;(setq ido-enable-flex-matching t)
    ;;(setq ido-everywhere t)
    ;;(ido-mode 1)
    (add-to-list 'default-frame-alist '(font . "Fira Code-17"))
    ;;(windmove-default-keybindings) ;;uses shift + arrow keys to move around the windows.

    ;;(defalias 'list-buffers 'ibuffer) ; make ibuffer default

    (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

    ;; Save whatever’s in the current (system) clipboard before
    ;; replacing it with the Emacs’ text.
    ;; https://github.com/dakrone/eos/blob/master/eos.org
    (setq save-interprogram-paste-before-kill t)
    (column-number-mode t)
    (setq tramp-default-method "ssh")

    ;;Keyboard tweaks
    ;;(setq mac-command-modifier 'meta) ; make cmd key do Meta
    ;;(setq mac-option-modifier 'super) ; make opt key do Super
    ;;(setq mac-control-modifier 'control) ; make Control key do Control
    (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
  #+END_SRC

* Theme

  #+BEGIN_SRC emacs-lisp

    ;;(use-package spacemacs-theme
    ;;  :defer t
    ;;  :init (load-theme 'spacemacs-dark t))

    ;;(use-package monokai-theme
    ;;  :ensure t
    ;;  :config (load-theme 'monokai t))

    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))


    ;;(use-package color-theme-modern
    ;;  :ensure t)
    ;;
    ;;(use-package base16-theme
    ;;  :ensure t
    ;;  )
    ;;(use-package moe-theme
    ;;  :ensure t)
    ;;
    ;;(use-package alect-themes
    ;;  :ensure t)
    ;;
    ;;(use-package zerodark-theme
    ;;  :ensure t)
    ;;
    ;;(use-package faff-theme
    ;;  :ensure t)
    ;;
    ;;(use-package poet-theme
    ;;  :ensure t)
    ;;
    ;;(use-package tao-theme
    ;;  :ensure t)
    ;;
    ;;(use-package doom-themes
    ;;  :ensure t)
  #+END_SRC

* All the Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :defer 0.5)

  (use-package all-the-icons-ivy
    :ensure t
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))


  (use-package all-the-icons-dired
    :ensure t
    )

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

* Try

  #+BEGIN_SRC emacs-lisp

(use-package try
  :ensure t)
  #+END_SRC

* PosFrame

#+BEGIN_SRC emacs-lisp
(use-package posframe)
#+END_SRC

* Which key

  #+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :config
  (which-key-mode))

  #+END_SRC

* PowerLine

#+BEGIN_SRC emacs-lisp
;;  ;; powerline
;;  (use-package powerline
;;    :ensure t
;;    :init
;;    (powerline-evil-center-color-theme))
;;  (add-hook 'after-init-hook 'powerline-reset)
;;
;;  (use-package powerline-evil
;;    :ensure t)
#+END_SRC

* Evil Mode For Vi

  #+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/evil")
(require 'evil)
(evil-mode 1)

 (use-package evil-matchit             ; vi-% for more than {[""]}
    :ensure t
    :init
    (global-evil-matchit-mode 1))
 
 (use-package evil-surround            ; Exactly like tpopes vim-surround
    :ensure t
    :init
    (global-evil-surround-mode))
  #+END_SRC

* Org Bullets

  #+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC

* Relative Line number

  #+BEGIN_SRC emacs-lisp

(use-package linum-relative
  :ensure t
  :config
  (linum-relative-global-mode 1))

(linum-relative-global-mode 1)

;; Use `display-line-number-mode' as linum-mode's backend for smooth performance
(setq linum-relative-backend 'display-line-numbers-mode)

  #+END_SRC

* Format-all

  #+BEGIN_SRC emacs-lisp

(use-package format-all
  :ensure t)

  #+END_SRC

* tabbar

  #+BEGIN_SRC emacs-lisp

(use-package tabbar
  :ensure t
  :config (tabbar-mode 1)
  )

  #+END_SRC

* Ace Window

  #+BEGIN_SRC emacs-lisp

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))

  #+END_SRC

* Counsel/Ivy/Swiper

  #+BEGIN_SRC emacs-lisp

    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line))
      )

    (use-package smex
      :ensure t
      :init (smex-initialize))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))


    (load-if-exists "./custom-el-scripts/init-ivy-rich.el")

    ;; Enhance fuzzy matching
    (use-package flx
      :ensure t)

    ;; Enhance M-x
    (use-package amx
      :ensure t)

    ;; Ivy integration for Projectile
    (use-package counsel-projectile
      :ensure t
      :config (counsel-projectile-mode 1))

    ;; Integration with `projectile'
    (with-eval-after-load 'projectile
      (setq projectile-completion-system 'ivy))

    ;; Integration with `magit'
    (with-eval-after-load 'magit
      (setq magit-completing-read-function 'ivy-completing-read))

    (use-package swiper
      :ensure t
      ;;This also can be used to bind keys
      ;;:bind (("C-s" . swiper)
      ;;	 ("C-r" . swiper)
      ;;	 ("C-c C-r" . ivy-resume)
      ;;	 ("M-x" . counsel-M-x)
      ;;	 ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-load-library)
        (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))
    (use-package prescient
      :ensure t
      :config (prescient-persist-mode))

    (use-package ivy-prescient
      :ensure t
      :after ivy
      :init (ivy-prescient-mode))
  #+END_SRC

* Avy

  #+BEGIN_SRC emacs-lisp

(use-package avy
  :ensure t
  :bind (("M-s" . avy-goto-char)
         ("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g l" . avy-goto-line))
  :config
  (avy-setup-default))

  #+END_SRC

* Auto-Complete

  #+BEGIN_SRC emacs-lisp

  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
  #+END_SRC

* Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :defines
    (company-dabbrev-ignore-case company-dabbrev-downcase)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("<tab>" . company-complete-common-or-cycle)
          :map company-search-map
          ("C-p" . company-select-previous)
          ("C-n" . company-select-next))
    :custom
    (company-idle-delay 0)
    (company-echo-delay 0)
    (company-minimum-prefix-length 1)
    :hook
    (after-init . global-company-mode)
    (plantuml-mode . (lambda () (set (make-local-variable 'company-backends)
                                     '((company-yasnippet
                                        ;; company-dabbrev
                                        )))))
    ((go-mode
      c++-mode
      c-mode
      objc-mode) . (lambda () (set (make-local-variable 'company-backends)
                                   '((company-yasnippet
                                      company-lsp
                                      company-files
                                      ;; company-dabbrev-code
                                      )))))
    :config
    ;; using child frame
   (use-package company-posframe
      :ensure t
     :hook (company-mode . company-posframe-mode))
    ;; Show pretty icons
    (use-package company-box
      :ensure t
      :diminish
      :hook (company-mode . company-box-mode)
      :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :config
      (setq company-box-backends-colors nil)
      (setq company-box-show-single-candidate t)
      (setq company-box-max-candidates 50)

      (defun company-box-icons--elisp (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))

      (with-eval-after-load 'all-the-icons
        (declare-function all-the-icons-faicon 'all-the-icons)
        (declare-function all-the-icons-fileicon 'all-the-icons)
        (declare-function all-the-icons-material 'all-the-icons)
        (declare-function all-the-icons-octicon 'all-the-icons)
        (setq company-box-icons-all-the-icons
              `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.7 :v-adjust -0.15))
                (Text . ,(all-the-icons-faicon "book" :height 0.68 :v-adjust -0.15))
                (Method . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Function . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Constructor . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Field . ,(all-the-icons-faicon "tags" :height 0.65 :v-adjust -0.15 :face 'font-lock-warning-face))
                (Variable . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face))
                (Class . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
                (Interface . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01))
                (Module . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.15))
                (Property . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face)) ;; Golang module
                (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.7 :v-adjust -0.15))
                (Value . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'font-lock-constant-face))
                (Enum . ,(all-the-icons-material "storage" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-orange))
                (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.7 :v-adjust -0.15))
                (Snippet . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))
                (Color . ,(all-the-icons-material "palette" :height 0.7 :v-adjust -0.15))
                (File . ,(all-the-icons-faicon "file-o" :height 0.7 :v-adjust -0.05))
                (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.7 :v-adjust -0.15))
                (Folder . ,(all-the-icons-octicon "file-directory" :height 0.7 :v-adjust -0.05))
                (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-blueb))
                (Constant . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05))
                (Struct . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
                (Event . ,(all-the-icons-faicon "bolt" :height 0.7 :v-adjust -0.05 :face 'all-the-icons-orange))
                (Operator . ,(all-the-icons-fileicon "typedoc" :height 0.65 :v-adjust 0.05))
                (TypeParameter . ,(all-the-icons-faicon "hashtag" :height 0.65 :v-adjust 0.07 :face 'font-lock-const-face))
                (Template . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))))))
    ;; Show quick tooltip
    (use-package company-quickhelp
      :ensure t
      :defines company-quickhelp-delay
      :bind (:map company-active-map
                  ("M-h" . company-quickhelp-manual-begin))
      :hook (global-company-mode . company-quickhelp-mode)
      :custom (company-quickhelp-delay 0.8)))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    )

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

  ;; company box mode
  ;;(use-package company-box
  ;;:ensure t
  ;;  :hook (company-mode . company-box-mode))
#+END_SRC

* Reveal.js

  #+BEGIN_SRC emacs-lisp

  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
  #+END_SRC

* Org-Config-Easy-Template

  #+BEGIN_SRC emacs-lisp
  ;; add <el for emacs-lisp expansion
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
                 "<src lang=\"emacs-lisp\">\n?\n</src>"))
  ;; add <p for python expansion
  (add-to-list 'org-structure-template-alist
               '("p" "#+BEGIN_SRC python :results output org drawer\n?\n#+END_SRC"
                 "<src lang=\"python\">\n?\n</src>"))

  ;; add <r for R expansion
  (add-to-list 'org-structure-template-alist
               '("p" "#+BEGIN_SRC r :results output org drawer\n?\n#+END_SRC"
                 "<src lang=\"r\">\n?\n</src>"))

  (add-to-list 'org-structure-template-alist
               '("ao" "#+attr_org: " ""))

  (add-to-list 'org-structure-template-alist
               '("al" "#+attr_latex: " ""))

  (add-to-list 'org-structure-template-alist
               '("ca" "#+caption: " ""))

  (add-to-list 'org-structure-template-alist
               '("tn" "#+tblname: " ""))

  (add-to-list 'org-structure-template-alist
               '("n" "#+name: " ""))

  (add-to-list 'org-structure-template-alist
               '("o" "#+options: " ""))

  (add-to-list 'org-structure-template-alist
               '("ti" "#+title: " ""))
  #+END_SRC

* FlyCheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  #+END_SRC

* Pyhton
  #+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
  ;; make sure to install jedi-server for effective pip lint
  ;; M-x jedi:install-server
  ;; Check Elpy if interested in Python Developement

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))

  #+END_SRC

* White Space and Blank Lines

  #+BEGIN_SRC emacs-lisp
    ;; whitespace cleanup
    (use-package whitespace-cleanup-mode
      :ensure t
      :diminish whitespace-cleanup-mode
      :init (global-whitespace-cleanup-mode))
  #+END_SRC

* MarkDown mode
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package markdownfmt
      :ensure t)

    (use-package markdown-preview-mode
      :ensure t)
  #+END_SRC

* Undo-tree
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
  #+END_SRC

* Highlight cursor line
  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  #+END_SRC

* Beacon Mode
  #+BEGIN_SRC emacs-lisp
; flashes the cursor's line when you scroll
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
; this color looks good for the zenburn theme but not for the one
; I'm using for the videos
(setq beacon-color "#666600")
    )
  #+END_SRC

* Hungy Delete Mode
  #+BEGIN_SRC emacs-lisp
; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  #+END_SRC

* Expand Region
  #+BEGIN_SRC emacs-lisp
; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC

* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :config
      (global-set-key (kbd "C-S-l C-S-l") 'my/hydra-multiple-cursors/body)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
      (global-set-key (kbd "C-S-l C-n") 'mc/mark-next-lines)
      :preface
      ;; insert specific serial number
      (defvar my/mc/insert-numbers-hist nil)
      (defvar my/mc/insert-numbers-inc 1)
      (defvar my/mc/insert-numbers-pad "%01d")
      (defun my/mc/insert-numbers (start inc pad)
        "Insert increasing numbers for each cursor specifically."
        (interactive
         (list (read-number "Start from: " 0)
               (read-number "Increment by: " 1)
               (read-string "Padding (%01d): " nil my/mc/insert-numbers-hist "%01d")))
        (setq mc--insert-numbers-number start)
        (setq my/mc/insert-numbers-inc inc)
        (setq my/mc/insert-numbers-pad pad)
        (mc/for-each-cursor-ordered
         (mc/execute-command-for-fake-cursor
          'my/mc--insert-number-and-increase
          cursor)))

      (defun my/mc--insert-number-and-increase ()
        (interactive)
        (insert (format my/mc/insert-numbers-pad mc--insert-numbers-number))
        (setq mc--insert-numbers-number (+ mc--insert-numbers-number my/mc/insert-numbers-inc)))

      (defhydra my/hydra-multiple-cursors (:hint nil)
        "
     Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
    ------------------------------------------------------------------
     [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
     [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
     [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
     [Click] Cursor at point       [_q_] Quit"
        ("l" mc/edit-lines :exit t)
        ("a" mc/mark-all-like-this :exit t)
        ("n" mc/mark-next-like-this)
        ("N" mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p" mc/mark-previous-like-this)
        ("P" mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("s" mc/mark-all-in-region-regexp :exit t)
        ("0" mc/insert-numbers :exit t)
        ("A" mc/insert-letters :exit t)
        ("q" nil))
      )
  #+END_SRC

* smart-forward
  #+BEGIN_SRC emacs-lisp
  (use-package smart-forward
    :ensure t
    :config
    (global-set-key (kbd "M-<up>") 'smart-up)
    (global-set-key (kbd "M-<down>") 'smart-down)
    (global-set-key (kbd "M-<left>") 'smart-backward)
    (global-set-key (kbd "M-<right>") 'smart-forward))
  #+END_SRC

* Join Line
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-j")
                  (lambda ()
                    (interactive)
                    (join-line -1)))
  #+END_SRC

* Parantasis/brackets
** Highlight matching pair
   #+BEGIN_SRC emacs-lisp
;; Complete pair
;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)

;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)

;; highlight brackets
(setq show-paren-style 'parenthesis)

;; highlight entire expression
;;(setq show-paren-style 'expression)

;; highlight brackets if visible, else entire expression
;;(setq show-paren-style 'mixed)
   #+END_SRC

* string-inflection for string manipulation
  #+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :ensure t
    :bind (("C-c i" . string-inflection-all-cycle))
    )

  ;; for java
  (add-hook 'java-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c i") 'string-inflection-java-style-cycle)))

  ;; for python
  (add-hook 'python-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c i") 'string-inflection-python-style-cycle)))
  #+END_SRC

* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp
    ; mark and edit all copies of the marked region simultaniously.

    (use-package iedit
      :ensure t)

  #+END_SRC

* Dump-Keys
  #+BEGIN_SRC emacs-lisp
  (load-if-exists "./custom-el-scripts/dump-keys.el")
  #+END_SRC

* Web-Mode
  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
  #+END_SRC

* Mode Line

  #+BEGIN_SRC emacs-lisp

    (setq display-time-24hr-format t)
    (display-time-mode +1)

    (use-package doom-modeline
      :ensure t
      :config
      (set-cursor-color "cyan")
      (line-number-mode 0)
      (column-number-mode 0))
    (require 'doom-modeline)
    (doom-modeline-init)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-enable-word-count t)
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

    ;; Whether display icons in mode-line or not.
    (setq doom-modeline-icon t)

    ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
    (setq doom-modeline-major-mode-icon t)

    ;; Whether display color icons for `major-mode'. It respects
    ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
    (setq doom-modeline-major-mode-color-icon t)

    ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
    (setq doom-modeline-buffer-state-icon t)

    ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
    ;; and `doom-modeline-buffer-state-icon'.
    (setq doom-modeline-buffer-modification-icon t)
  #+END_SRC

* Uniquify For buffer names

  #+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward)
  )

  #+END_SRC

* Formatting and white-space

  #+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode nil)

  #+END_SRC
  
* Posframe

#+BEGIN_SRC emacs-lisp
(use-package posframe :ensure t)
#+END_SRC

* Yasnippet
  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package auto-yasnippet
    :ensure t)
#+END_SRC

* Dired
  
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)

(use-package dired-narrow
:ensure t
:config
(bind-key "C-c C-n" #'dired-narrow)
(bind-key "C-c C-f" #'dired-narrow-fuzzy)
(bind-key "C-x C-N" #'dired-narrow-regexp)
)

(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
  ;; projectile
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (counsel-projectile-on)q)
#+END_SRC

* Smart-Parens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode 1)))
#+END_SRC

* Font Scaling

#+BEGIN_SRC emacs-lisp
  ;; font scaling
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

  (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
#+END_SRC

* Hydra
  
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :init
    (global-set-key
     (kbd "C-x t")
     (defhydra toggle (:color blue)
       "toggle"
       ("a" abbrev-mode "abbrev")
       ("s" flyspell-mode "flyspell")
       ("d" toggle-debug-on-error "debug")
       ("c" fci-mode "fCi")
       ("f" auto-fill-mode "fill")
       ("t" toggle-truncate-lines "truncate")
       ("w" whitespace-mode "whitespace")
       ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline
       ( :pre (linum-mode 1)
              :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
       ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

  (defhydra hydra-multiple-cursors (:hint nil)
    "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("s" mc/mark-all-in-region-regexp :exit t)
    ("0" mc/insert-numbers :exit t)
    ("A" mc/insert-letters :exit t)
    ("<mouse-1>" mc/add-cursor-on-click)
    ;; Help with click recognition in this hydra
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore)
    ("q" nil)


    ("<mouse-1>" mc/add-cursor-on-click)
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore))

#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (use-package transient
    :ensure t)

  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (setq magit-status-margin
        '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
    "
    Git gutter:
      _j_: next hunk        _s_tage hunk     _q_uit
      _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ^ ^                   _p_opup hunk
      _h_: first hunk
      _l_: last hunk        set start _R_evision
    "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
     :color blue))

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'"
    :mode "\\.git/config\\'"
    :mode "\\.gitmodules\\'")

  (use-package gitignore-mode
    :mode "\\.gitignore\\'"
    :mode "\\.dockerignore\\'"
    :mode "\\..elpaignore\\'")

  (use-package diffview
    :commands (diffview-region diffview-current)
    :preface
    (defun my/diffview-dwim ()
      (interactive)
      (if (region-active-p)
          (diffview-region)
        (diffview-current)))
    :bind ("M-g v" . my/diffview-dwim))

  (use-package smerge-mode
    :diminish
    :preface
    (with-eval-after-load 'hydra
      (defhydra smerge-hydra
        (:color pink :hint nil :post (smerge-auto-leave))
        "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
        ("n" smerge-next)
        ("p" smerge-prev)
        ("b" smerge-keep-base)
        ("u" smerge-keep-upper)
        ("l" smerge-keep-lower)
        ("a" smerge-keep-all)
        ("RET" smerge-keep-current)
        ("\C-m" smerge-keep-current)
        ("<" smerge-diff-base-upper)
        ("=" smerge-diff-upper-lower)
        (">" smerge-diff-base-lower)
        ("R" smerge-refine)
        ("E" smerge-ediff)
        ("C" smerge-combine-with-next)
        ("r" smerge-resolve)
        ("k" smerge-kill-current)
        ("ZZ" (lambda ()
                (interactive)
                (save-buffer)
                (bury-buffer))
         "Save and bury buffer" :color blue)
        ("q" nil "cancel" :color blue)))
    :hook ((find-file . (lambda ()
                          (save-excursion
                            (goto-char (point-min))
                            (when (re-search-forward "^<<<<<<< " nil t)
                              (smerge-mode 1)))))
           (magit-diff-visit-file . (lambda ()
                                      (when smerge-mode
                                        (smerge-hydra/body))))))
#+END_SRC

* Better Shell
  
#+BEGIN_SRC emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-\"" . better-shell-shell)
           ("C-:" . better-shell-remote-open)))
#+END_SRC

* Dumb Jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+END_SRC

* Origami folding

#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t)
#+END_SRC

* IBUFFER

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC

* Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("<C-M-tab>" . treemacs)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
          ))


  (use-package treemacs-projectile
    :defer t
    :ensure t
    :bind (:map global-map
                ("C-c o p" . treemacs-projectile))
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  ;;(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
#+END_SRC

* Aggresive indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1)
    ;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    )
#+END_SRC

* FZF

#+BEGIN_SRC emacs-lisp
(use-package fzf :ensure t)
#+END_SRC

* RipGrep

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :ensure t)

  (use-package rg
    :ensure t
    :commands rg)
#+END_SRC

* Easy kill

#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC

* PATH

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    )
#+END_SRC

* Wgrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    )
  (use-package wgrep-ag
    :ensure t
    )
  (require 'wgrep-ag)
#+END_SRC

* Regex

#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :ensure t
    :config
    (pcre-mode)
    )
#+END_SRC

* Eyebrowse

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode)
    )
#+END_SRC

* PDF Tools

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
  (use-package org-pdfview
    :ensure t)

  (require 'pdf-tools)
  (require 'org-pdfview)
#+END_SRC

* Sunrise Commander

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/sunrise-commander")
(require 'sunrise-commander)
(require 'sunrise-x-buttons)
(require 'sunrise-x-modeline)
(add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
#+END_SRC

* EditorConfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

* Yaml Mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    )

  (use-package flycheck-yamllint
    :ensure t
    :defer t
    :init
    (progn
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+END_SRC

* Docker-Mode

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :defer t
    :init
    (progn
      (use-package docker-tramp
        :defer t)

      (use-package dockerfile-mode
        :mode "Dockerfile\\'")

      (use-package docker-compose-mode
        :mode "docker-compose[^/]*\\.yml\\'")))
#+END_SRC

* EShell-Enhancements

#+BEGIN_SRC emacs-lisp
  ;;(use-package em-smart
  ;;  :ensure t
  ;;  :hook (eshell-mode . eshell-smart-initialize)
  ;;  :config
  ;;  (progn
  ;;    (add-to-list 'eshell-smart-display-navigate-list #'counsel-esh-history)))
  ;;
  ;;(use-package esh-autosuggest
  ;;  :ensure t
  ;;  :disabled t
  ;;  :hook (eshell-mode . esh-autosuggest-mode))
  ;;
  ;;(use-package em-cmpl
  ;;  :ensure t
  ;;  :hook (eshell-mode . eshell-cmpl-initialize)
  ;;  :init
  ;;  (progn
  ;;    (defun my/eshell-bash-completion ()
  ;;      (let ((bash-completion-nospace t))
  ;;        (while (pcomplete-here
  ;;                (nth 2 (bash-completion-dynamic-complete-nocomint
  ;;                        (save-excursion (eshell-bol) (point))
  ;;                        (point)))))))
#+END_SRC

* Groovy

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :mode (("\\.groovy" . groovy-mode)
           ("/Jenkinsfile" . groovy-mode))
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))
    (add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))
    (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . groovy-mode)))

  (use-package groovy-imports :ensure t)
  (use-package flycheck-gradle
    :ensure t
    :defer t)
#+END_SRC

* Duplicate Things

#+BEGIN_SRC emacs-lisp
  (use-package duplicate-thing
    :bind ("H-C-e d" . duplicate-thing)
    :ensure t)
#+END_SRC

* Custom Utils

#+Begin_SRC emacs-lisp
 (load-if-exists "./custom-el-scripts/custom-util-function.el")
#+END_SRC

* Ensime/Scala/Sbt

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :pin melpa)

  (use-package sbt-mode
    :ensure t
    :pin melpa)

  (use-package scala-mode
    :ensure t
    :pin melpa)
#+END_SRC

* Java

#+BEGIN_SRC emacs-lisp
 (load-if-exists "./custom-el-scripts/init-java.el")
#+END_SRC

* Auto-revert

#+BEGIN_SRC emacs-lisp
;; Automatically reload files was modified by external program
(use-package autorevert
  :ensure nil
  :diminish
  :hook (after-init . global-auto-revert-mode))
#+END_SRC

* Save Place/ Recentf

#+BEGIN_SRC emacs-lisp
;; History
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))

;; Recent files
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 20000000)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     "cache"
                     "recentf"
                     "COMMIT_EDITMSG\\'"))
  :preface
  (defun my/recentf-save-list-silence ()
    (interactive)
    (let ((message-log-max nil))
      (if (fboundp 'shut-up)
          (shut-up (recentf-save-list))
        (recentf-save-list)))
    (message ""))
  (defun my/recentf-cleanup-silence ()
    (interactive)
    (let ((message-log-max nil))
      (if shutup-p
          (shut-up (recentf-cleanup))
        (recentf-cleanup)))
    (message ""))
  :hook
  (focus-out-hook . (my/recentf-save-list-silence my/recentf-cleanup-silence)))
#+END_SRC

* AG - The silver searcher

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :custom
    (ag-highligh-search t)
    (ag-reuse-buffers t)
    (ag-reuse-window t)
    :bind
    ("H-M-p a" . ag-project)
    :config
    (use-package wgrep-ag))
#+END_SRC

* MWIM

#+BEGIN_SRC emacs-lisp
  (use-package mwim
    :ensure t
    :bind
    ("H-C-g a" . mwim-beginning-of-code-or-line)
    ("H-C-g e" . mwim-end-of-code-or-line))
#+END_SRC

* Google-this

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t)
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp

(use-package dashboard
  :ensure t
  :diminish
  (dashboard-mode page-break-lines-mode)
  :custom
  (dashboard-center-content t)
  (dashboard-startup-banner 2)
  (dashboard-items '((recents . 15)
                     (projects . 5)
                     (bookmarks . 5)))
  :custom-face
  (dashboard-heading ((t (:foreground "#f1fa8c" :weight bold))))
  :hook
  (after-init . dashboard-setup-startup-hook))

#+END_SRC

* Dimmer

#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :disabled
    :custom
    (dimmer-fraction 0.5)
    (dimmer-exclusion-regexp-list
     '(".*Minibuf.*"
       ".*which-key.*"
       ".*Messages.*"
       ".*Async.*"
       ".*Warnings.*"
       ".*LV.*"
       ".*Ilist.*"))
    :config
    (dimmer-mode t))
#+END_SRC

* Rainbow

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))

#+END_SRC

* Kubernates

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview))

;; If you want to pull in the Evil compatibility package.
(use-package kubernetes-evil
  :ensure t
  :after kubernetes)
  
(use-package k8s-mode
  :ensure t
  :hook (k8s-mode . yas-minor-mode))
#+END_SRC

* Json

#+BEGIN_SRC emacs-lisp
  ;;; Languages
  (use-package js2-mode                   ; Javascript
    :ensure t
    :mode (("\\.jsx?\\'" . js2-mode))
    :commands (j2-mode))

  (use-package json-mode                  ; JSON
    :ensure t
    :mode (("\\.json\\'" . json-mode))
    :commands (json-mode))

  (use-package json-navigator
    :ensure t)

  (use-package web-beautify
    :ensure t)
    
#+END_SRC

* Csv Mode

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t)
#+END_SRC

* Indentation-tools
  
#+BEGIN_SRC emacs-lisp
  (use-package indent-tools
    :ensure t)
#+END_SRC

* Move-text

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :bind
    (("M-<up>" . move-text-up)
     ("M-<down>" . move-text-down)))
#+END_SRC

* Quick-run

#+BEGIN_SRC emacs-lisp
  (use-package quickrun
    :ensure t
    :bind
    (("<f7>r r" . quickrun)
     ("<f7>r c". quickrun-compile-only)))
#+END_SRC

* Auto-update packages

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

* Evil-numbers

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t)

  (global-set-key (kbd "C-c C-i +") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C-c C-i -") 'evil-numbers/dec-at-pt)

  (define-key evil-normal-state-map (kbd "C-c C-i +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c C-i -") 'evil-numbers/dec-at-pt)
#+END_SRC

* Evil Lion mode
#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
;; See Doc - https://github.com/edkolev/evil-lion
#+END_SRC

* Evil Exchange

#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :ensure t)
#+END_SRC
