#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* repos

  #+BEGIN_SRC emacs-lisp

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  #+END_SRC

* File-Exists Function
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists(f)
      "load the elip file only if it exits"
      (if (file-readable-p f)
          (load-file f)))
  ;; You can also use below
  ;;(when (file-readable-p f) (load-file p))
  #+END_SRC

* interface tweaks

  #+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-message t)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-auto-revert-mode 1)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-auto-revert-mode 1) ;; you might not want this
    (setq auto-revert-verbose nil) ;; or thiS
    ;; using swiper so ido no longer needed
    (tool-bar-mode -1)
    (winner-mode 1)
    (superword-mode 1)

    ;;Added this to disable linum in pdf-tools
    (add-hook 'pdf-view-mode-hook (lambda() (linum-relative-mode -1)))
    ;;to remember window config
    ;;(setq ido-enable-flex-matching t)
    ;;(setq ido-everywhere t)
    ;;(ido-mode 1)
    (add-to-list 'default-frame-alist '(font . "Fira Code-17"))
    ;;(windmove-default-keybindings) ;;uses shift + arrow keys to move around the windows.

    ;;(defalias 'list-buffers 'ibuffer) ; make ibuffer default

    (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default

    ;; Save whatever’s in the current (system) clipboard before
    ;; replacing it with the Emacs’ text.
    ;; https://github.com/dakrone/eos/blob/master/eos.org
    (setq save-interprogram-paste-before-kill t)
    (column-number-mode t)
    (size-indication-mode t)
    (setq tramp-default-method "ssh")
    (setq tramp-auto-save-directory temporary-file-directory)

    (setq mouse-drag-copy-region nil
          x-select-enable-primary nil
          x-select-enable-clipboard t
          select-active-regions t)

    ;;Keyboard tweaks
    ;;(setq mac-command-modifier 'meta) ; make cmd key do Meta
    ;;(setq mac-option-modifier 'super) ; make opt key do Super
    ;;(setq mac-control-modifier 'control) ; make Control key do Control
    ;;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
    (setq user-full-name "Chetan Koneru")

    ;; Default to 16MB for garbage collection
    (defvar mu-gc-cons-threshold 16777216)

    ;; Temporary value for garbage collection is 512MB
    (defvar mu-gc-cons-upper-limit 536870912)

    ;;Ediff mode is a UNIX patching tool and my version controlling package uses this to help resolve merge conflicts and having some better defaults will be useful for this.
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally)

    ;;`'subword-mode`' is a built-in mode that helps moving over camelCase words correctly.
    (setq sentence-end-double-space nil)

    ;;Recneter screen
    (setq recenter-positions '(top middle bottom))

    ;;Better wild cards in search
    ;;The built-in incremental search is pretty good but the most common regex I type is .* which stands for anything. This makes sure space between words acts the same way. It’s much better for me to use it now.
    (setq search-whitespace-regexp ".*?")

    ;;Persistent history
    (setq savehist-file "~/.emacs.d/savehist")
    (savehist-mode 1)
    (setq history-length t)
    (setq history-delete-duplicates t)
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))

    ;; Added this to build pdf tools
    ;;(setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig")

    ;;async, s, dash, and cl-lib are libraries for asynchronous processing, string manipulation, list manipulation and backward compatibility respectively.
    (use-package async
      :ensure t
      :commands (async-start))

    (use-package cl-lib
      :ensure t)

    (use-package dash
      :ensure t)

    (use-package diminish :ensure t)

    (use-package s
      :ensure t)

    ;;Restart emacs from emacs
    (use-package restart-emacs
      :ensure t
      :bind* (("C-x M-c" . restart-emacs)))

    ;; Open Large file
    (use-package vlf
      :ensure t
      :config
      (require 'vlf-setup))

    ;; Delete trailing-whitespace
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;;  Sometimes you want to be able to do fancy things with the text that you're entering into the minibuffer. Sometimes you just want to be able to read it, especially when it comes to lots of text. This binds C-M-e in a minibuffer) so that you can edit the contents of the minibuffer before submitting it.
    ;;(use-package miniedit
    ;;  :commands minibuffer-edit
    ;;  :init (miniedit-install))
  #+END_SRC

* Theme

  #+BEGIN_SRC emacs-lisp

    ;;(use-package spacemacs-theme
    ;;  :defer t
    ;;  :init (load-theme 'spacemacs-dark t))

    ;;(use-package monokai-theme
    ;;  :ensure t
    ;;  :config (load-theme 'monokai t))

    ;; (use-package zenburn-theme
    ;;   :ensure t
    ;;   :config (load-theme 'zenburn t))

    ;;(use-package dracula-theme
    ;;  :ensure t
    ;;  :demand
    ;;  :config (load-theme 'dracula t))

    ;; (use-package color-theme-modern
    ;;   :ensure t)

    (use-package base16-theme
      :ensure t
      :init (load-theme 'base16-spacemacs t)
      )

    ;;(use-package moe-theme
    ;;  :ensure t)
    ;;
    ;;(use-package alect-themes
    ;;  :ensure t)
    ;;
    ;;(use-package zerodark-theme
    ;;  :ensure t)
    ;;
    ;;(use-package faff-theme
    ;;  :ensure t)
    ;;
    ;;(use-package poet-theme
    ;;  :ensure t)
    ;;
    ;;(use-package tao-theme
    ;;  :ensure t)
    ;;
    ;;(use-package doom-themes
    ;;  :ensure t)
  #+END_SRC

* Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :init
    (global-set-key
     (kbd "C-x t")
     (defhydra toggle (:color blue)
       "toggle"
       ("a" abbrev-mode "abbrev")
       ("s" flyspell-mode "flyspell")
       ("d" toggle-debug-on-error "debug")
       ("c" fci-mode "fCi")
       ("f" auto-fill-mode "fill")
       ("t" toggle-truncate-lines "truncate")
       ("w" whitespace-mode "whitespace")
       ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline
       ( :pre (linum-mode 1)
              :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
       ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

#+END_SRC

* All the Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :defer 0.5)

  (use-package all-the-icons-ivy
    :ensure t
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))


  (use-package all-the-icons-dired
    :ensure t
    )

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

* Try

  #+BEGIN_SRC emacs-lisp

(use-package try
  :ensure t)
  #+END_SRC

* PosFrame

#+BEGIN_SRC emacs-lisp
  (use-package posframe
    :ensure t)
#+END_SRC

* Use-package chords
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :ensure t
    :config (key-chord-mode 1))
#+END_SRC

* Quelpa

#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :init
    (setq quelpa-update-melpa-p nil))

  ;;(package-initialize)
  ;;(if (require 'quelpa nil t)
  ;;    (quelpa-self-upgrade)
  ;;  (with-temp-buffer
  ;;    (url-insert-file-contents "https://framagit.org/steckerhalter/quelpa/raw/master/bootstrap.el")
  ;;    (eval-buffer)))
#+END_SRC

* Which key

  #+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :config
  (which-key-mode))

  #+END_SRC

* PowerLine

#+BEGIN_SRC emacs-lisp
;;  ;; powerline
;;  (use-package powerline
;;    :ensure t
;;    :init
;;    (powerline-evil-center-color-theme))
;;  (add-hook 'after-init-hook 'powerline-reset)
;;
;;  (use-package powerline-evil
;;    :ensure t)
#+END_SRC

* Evil Mode For Vi

  #+BEGIN_SRC emacs-lisp

    (add-to-list 'load-path "~/.emacs.d/evil")
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (require 'evil)
    (evil-mode 1)

    (use-package evil-matchit             ; vi-% for more than {[""]}
      :ensure t
      :init
      (global-evil-matchit-mode 1))

    (use-package evil-surround            ; Exactly like tpopes vim-surround
      :ensure t
      :init
      (global-evil-surround-mode))

    ;; Treat underscores '_' part of the words
    (with-eval-after-load 'evil
      (defalias #'forward-evil-word #'forward-evil-symbol))

    (evil-set-initial-state 'ibuffer-mode 'emacs)
    (evil-set-initial-state 'bookmark-bmenu-mode 'emacs)
    (evil-set-initial-state 'dired-mode 'emacs)
  #+END_SRC

* Org Bullets

  #+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC

* Relative Line number

  #+BEGIN_SRC emacs-lisp

(use-package linum-relative
  :ensure t
  :config
  (linum-relative-global-mode 1))

(linum-relative-global-mode 1)

;; Use `display-line-number-mode' as linum-mode's backend for smooth performance
(setq linum-relative-backend 'display-line-numbers-mode)

  #+END_SRC

* Format-all

  #+BEGIN_SRC emacs-lisp

(use-package format-all
  :ensure t)

  #+END_SRC

* tabbar

  #+BEGIN_SRC emacs-lisp

    ;;(use-package tabbar
    ;;  :ensure t
    ;;  :config (tabbar-mode 1)
    ;;  )

  #+END_SRC

* Ace Window

  #+BEGIN_SRC emacs-lisp

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))

  #+END_SRC

* Counsel/Ivy/Swiper

  #+BEGIN_SRC emacs-lisp

    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line))
      )

    (use-package smex
      :ensure t
      :init (smex-initialize))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))


    (load-if-exists "~/.emacs.d/custom-el-scripts/init-ivy-rich.el")

    ;; Enhance fuzzy matching
    (use-package flx
      :ensure t)

    ;; Enhance M-x
    (use-package amx
      :ensure t)

    ;; Ivy integration for Projectile
    (use-package counsel-projectile
      :ensure t
      :config (counsel-projectile-mode 1))

    ;; Integration with `projectile'
    (with-eval-after-load 'projectile
      (setq projectile-completion-system 'ivy))

    ;; Integration with `magit'
    (with-eval-after-load 'magit
      (setq magit-completing-read-function 'ivy-completing-read))

    (use-package swiper
      :ensure t
      ;;This also can be used to bind keys
      ;;:bind (("C-s" . swiper)
      ;;	 ("C-r" . swiper)
      ;;	 ("C-c C-r" . ivy-resume)
      ;;	 ("M-x" . counsel-M-x)
      ;;	 ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-load-library)
        (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))
    (use-package prescient
      :ensure t
      :config (prescient-persist-mode))

    (use-package ivy-prescient
      :ensure t
      :after ivy
      :init (ivy-prescient-mode))
  #+END_SRC

* Avy

  #+BEGIN_SRC emacs-lisp

    (use-package avy
      :ensure t
      :bind (("M-s" . avy-goto-char)
             ("C-:" . avy-goto-word-0)
             ("C-'" . avy-goto-char-2)
             ("M-g l" . avy-goto-line))
      :config
      (avy-setup-default))

    (setq avy-background t)

  #+END_SRC

* Auto-Complete

  #+BEGIN_SRC emacs-lisp

  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
  #+END_SRC

* Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :defines
    (company-dabbrev-ignore-case company-dabbrev-downcase)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("<tab>" . company-complete-common-or-cycle)
          :map company-search-map
          ("C-p" . company-select-previous)
          ("C-n" . company-select-next))
    :custom
    (company-idle-delay 0)
    (company-echo-delay 0)
    (company-minimum-prefix-length 1)
    :hook
    (after-init . global-company-mode)
    (plantuml-mode . (lambda () (set (make-local-variable 'company-backends)
                                     '((company-yasnippet
                                        ;; company-dabbrev
                                        )))))
    ((go-mode
      c++-mode
      c-mode
      objc-mode) . (lambda () (set (make-local-variable 'company-backends)
                                   '((company-yasnippet
                                      company-lsp
                                      company-files
                                      ;; company-dabbrev-code
                                      )))))
    :config
    ;; using child frame
   (use-package company-posframe
      :ensure t
     :hook (company-mode . company-posframe-mode))
    ;; Show pretty icons
    (use-package company-box
      :ensure t
      :diminish
      :hook (company-mode . company-box-mode)
      :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :config
      (setq company-box-backends-colors nil)
      (setq company-box-show-single-candidate t)
      (setq company-box-max-candidates 50)

      (defun company-box-icons--elisp (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))

      (with-eval-after-load 'all-the-icons
        (declare-function all-the-icons-faicon 'all-the-icons)
        (declare-function all-the-icons-fileicon 'all-the-icons)
        (declare-function all-the-icons-material 'all-the-icons)
        (declare-function all-the-icons-octicon 'all-the-icons)
        (setq company-box-icons-all-the-icons
              `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.7 :v-adjust -0.15))
                (Text . ,(all-the-icons-faicon "book" :height 0.68 :v-adjust -0.15))
                (Method . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Function . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Constructor . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
                (Field . ,(all-the-icons-faicon "tags" :height 0.65 :v-adjust -0.15 :face 'font-lock-warning-face))
                (Variable . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face))
                (Class . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
                (Interface . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01))
                (Module . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.15))
                (Property . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face)) ;; Golang module
                (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.7 :v-adjust -0.15))
                (Value . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'font-lock-constant-face))
                (Enum . ,(all-the-icons-material "storage" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-orange))
                (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.7 :v-adjust -0.15))
                (Snippet . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))
                (Color . ,(all-the-icons-material "palette" :height 0.7 :v-adjust -0.15))
                (File . ,(all-the-icons-faicon "file-o" :height 0.7 :v-adjust -0.05))
                (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.7 :v-adjust -0.15))
                (Folder . ,(all-the-icons-octicon "file-directory" :height 0.7 :v-adjust -0.05))
                (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-blueb))
                (Constant . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05))
                (Struct . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
                (Event . ,(all-the-icons-faicon "bolt" :height 0.7 :v-adjust -0.05 :face 'all-the-icons-orange))
                (Operator . ,(all-the-icons-fileicon "typedoc" :height 0.65 :v-adjust 0.05))
                (TypeParameter . ,(all-the-icons-faicon "hashtag" :height 0.65 :v-adjust 0.07 :face 'font-lock-const-face))
                (Template . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))))))
    ;; Show quick tooltip
    (use-package company-quickhelp
      :ensure t
      :defines company-quickhelp-delay
      :bind (:map company-active-map
                  ("M-h" . company-quickhelp-manual-begin))
      :hook (global-company-mode . company-quickhelp-mode)
      :custom (company-quickhelp-delay 0.8)))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    )

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (setq company-global-modes '(not org-mode))
  ;; company box mode
  ;;(use-package company-box
  ;;:ensure t
  ;;  :hook (company-mode . company-box-mode))
#+END_SRC

* Reveal.js

  #+BEGIN_SRC emacs-lisp

  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
  #+END_SRC

* Org-Config-Easy-Template

  #+BEGIN_SRC emacs-lisp
  ;; add <el for emacs-lisp expansion
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
                 "<src lang=\"emacs-lisp\">\n?\n</src>"))
  ;; add <p for python expansion
  (add-to-list 'org-structure-template-alist
               '("p" "#+BEGIN_SRC python :results output org drawer\n?\n#+END_SRC"
                 "<src lang=\"python\">\n?\n</src>"))

  ;; add <r for R expansion
  (add-to-list 'org-structure-template-alist
               '("p" "#+BEGIN_SRC r :results output org drawer\n?\n#+END_SRC"
                 "<src lang=\"r\">\n?\n</src>"))

  (add-to-list 'org-structure-template-alist
               '("ao" "#+attr_org: " ""))

  (add-to-list 'org-structure-template-alist
               '("al" "#+attr_latex: " ""))

  (add-to-list 'org-structure-template-alist
               '("ca" "#+caption: " ""))

  (add-to-list 'org-structure-template-alist
               '("tn" "#+tblname: " ""))

  (add-to-list 'org-structure-template-alist
               '("n" "#+name: " ""))

  (add-to-list 'org-structure-template-alist
               '("o" "#+options: " ""))

  (add-to-list 'org-structure-template-alist
               '("ti" "#+title: " ""))
  #+END_SRC

* FlyCheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  #+END_SRC

* Pyhton
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))
    ;; make sure to install jedi-server for effective pip lint
    ;; M-x jedi:install-server
    ;; Check Elpy if interested in Python Developement

    (use-package elpy
      :ensure t
      :config
      (elpy-enable))

    (use-package virtualenvwrapper
      :ensure t
      :config
      (venv-initialize-interactive-shells)
      (venv-initialize-eshell))


    (use-package pip-requirements
      :ensure t
      :mode ("/requirements.txt$" . pip-requirements-mode))
  #+END_SRC

* White Space and Blank Lines

  #+BEGIN_SRC emacs-lisp
    ;; whitespace cleanup
    (use-package whitespace-cleanup-mode
      :ensure t
      :diminish whitespace-cleanup-mode
      :init (global-whitespace-cleanup-mode))
  #+END_SRC

* MarkDown mode
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package markdownfmt
      :ensure t)

    (use-package markdown-mode+
      :ensure t
      :after markdown-mode
      :defer t)

   ;; (use-package polymode
   ;;   :ensure t
   ;;   :config
   ;;   (require 'poly-markdown))

    (use-package markdown-preview-mode
      :ensure t)
  #+END_SRC

* Undo-tree
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
  #+END_SRC

* Highlight cursor line
  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  #+END_SRC

* Beacon Mode
  #+BEGIN_SRC emacs-lisp
; flashes the cursor's line when you scroll
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
; this color looks good for the zenburn theme but not for the one
; I'm using for the videos
(setq beacon-color "#666600")
    )
  #+END_SRC

* Hungy Delete Mode
  #+BEGIN_SRC emacs-lisp
; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  #+END_SRC

* Expand Region
  #+BEGIN_SRC emacs-lisp
    ;; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))


    (defhydra my/hydra-expand (:pre (er/mark-word)
                                    :color red
                                    :hint nil)
      "
     _a_: add    _r_: reduce   _q_: quit
     "
      ("a" er/expand-region)
      ("r" er/contract-region)
      ("q" nil :color blue))

    (bind-keys*
     ("M-m a a" . my/hydra-expand/body))
  #+END_SRC

* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :config
      (global-set-key (kbd "C-S-l C-S-l") 'my/hydra-multiple-cursors/body)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
      (global-set-key (kbd "C-S-l C-n") 'mc/mark-next-lines)
      :preface
      ;; insert specific serial number
      (defvar my/mc/insert-numbers-hist nil)
      (defvar my/mc/insert-numbers-inc 1)
      (defvar my/mc/insert-numbers-pad "%01d")
      (defun my/mc/insert-numbers (start inc pad)
        "Insert increasing numbers for each cursor specifically."
        (interactive
         (list (read-number "Start from: " 0)
               (read-number "Increment by: " 1)
               (read-string "Padding (%01d): " nil my/mc/insert-numbers-hist "%01d")))
        (setq mc--insert-numbers-number start)
        (setq my/mc/insert-numbers-inc inc)
        (setq my/mc/insert-numbers-pad pad)
        (mc/for-each-cursor-ordered
         (mc/execute-command-for-fake-cursor
          'my/mc--insert-number-and-increase
          cursor)))

      (defun my/mc--insert-number-and-increase ()
        (interactive)
        (insert (format my/mc/insert-numbers-pad mc--insert-numbers-number))
        (setq mc--insert-numbers-number (+ mc--insert-numbers-number my/mc/insert-numbers-inc)))

      (defhydra my/hydra-multiple-cursors (:hint nil)
        "
     Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
    ------------------------------------------------------------------
     [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
     [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
     [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
     [Click] Cursor at point       [_q_] Quit"
        ("l" mc/edit-lines :exit t)
        ("a" mc/mark-all-like-this :exit t)
        ("n" mc/mark-next-like-this)
        ("N" mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p" mc/mark-previous-like-this)
        ("P" mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("s" mc/mark-all-in-region-regexp :exit t)
        ("0" mc/insert-numbers :exit t)
        ("A" mc/insert-letters :exit t)
        ("q" nil))
      )

    (use-package evil-mc
      :ensure t
      :config
      (global-evil-mc-mode 1))


    (use-package evil-mc-extras
      :ensure t
      :config
      (global-evil-mc-extras-mode 1))

  #+END_SRC

* smart-forward
  #+BEGIN_SRC emacs-lisp
  (use-package smart-forward
    :ensure t
    :config
    (global-set-key (kbd "M-<up>") 'smart-up)
    (global-set-key (kbd "M-<down>") 'smart-down)
    (global-set-key (kbd "M-<left>") 'smart-backward)
    (global-set-key (kbd "M-<right>") 'smart-forward))
  #+END_SRC

* Join Line
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-j")
                  (lambda ()
                    (interactive)
                    (join-line -1)))
  #+END_SRC

* Parantasis/brackets
** Highlight matching pair
   #+BEGIN_SRC emacs-lisp
;; Complete pair
;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)
(setq electric-pair-preserve-balance nil)

;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)

;; highlight brackets
(setq show-paren-style 'parenthesis)

;; highlight entire expression
;;(setq show-paren-style 'expression)

;; highlight brackets if visible, else entire expression
;;(setq show-paren-style 'mixed)
   #+END_SRC

* string-inflection for string manipulation
  #+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :ensure t
    :bind (("C-c i" . string-inflection-all-cycle))
    )

  ;; for java
  (add-hook 'java-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c i") 'string-inflection-java-style-cycle)))

  ;; for python
  (add-hook 'python-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c i") 'string-inflection-python-style-cycle)))
  #+END_SRC

* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp
    ; mark and edit all copies of the marked region simultaniously.

    (use-package iedit
      :ensure t)

  #+END_SRC

* Dump-Keys
  #+BEGIN_SRC emacs-lisp
  (load-if-exists "~/.emacs.d/custom-el-scripts/dump-keys.el")
  #+END_SRC

* Web-Mode
  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
  #+END_SRC

* Mode Line

  #+BEGIN_SRC emacs-lisp

    (setq display-time-24hr-format t)
    (display-time-mode +1)

    (use-package doom-modeline
      :ensure t
      :config
      (set-cursor-color "cyan")
      (line-number-mode 0)
      (column-number-mode 0))
    (require 'doom-modeline)
    (doom-modeline-init)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-enable-word-count t)
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

    ;; Whether display icons in mode-line or not.
    (setq doom-modeline-icon t)

    ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
    (setq doom-modeline-major-mode-icon t)

    ;; Whether display color icons for `major-mode'. It respects
    ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
    (setq doom-modeline-major-mode-color-icon t)

    ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
    (setq doom-modeline-buffer-state-icon t)

    ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
    ;; and `doom-modeline-buffer-state-icon'.
    (setq doom-modeline-buffer-modification-icon t)
    ;; Whether display minor modes in mode-line or not.
    ;;(setq doom-modeline-minor-modes t)

    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 12)
  #+END_SRC

* Telephone-line

#+BEGIN_SRC emacs-lisp
  ;;(use-package telephone-line
  ;;  :ensure t
  ;;  :config
  ;;  (telephone-line-defsegment* mymacs-telephone-line-buffer-info ()
  ;;                              (when (and (eq 'python-mode major-mode)
  ;;                                         (bound-and-true-p pyvenv-virtual-env-name))
  ;;                                (telephone-line-raw (format "pyvenv: %s" pyvenv-virtual-env-name) t)))
  ;;
  ;;  (setq telephone-line-lhs
  ;;        '((evil   . (telephone-line-evil-tag-segment))
  ;;          (accent . (telephone-line-major-mode-segment))
  ;;          (evil   . (telephone-line-buffer-segment))
  ;;          (nil    . (telephone-line-minor-mode-segment))))
  ;;
  ;;  (setq telephone-line-rhs
  ;;        '((nil    . (telephone-line-misc-info-segment))
  ;;          (evil   . (mymacs-telephone-line-buffer-info))
  ;;          (accent . (telephone-line-vc-segment
  ;;                     telephone-line-erc-modified-channels-segment
  ;;                     telephone-line-process-segment))
  ;;          (evil   . (telephone-line-airline-position-segment))))
  ;;
  ;;  (require 'telephone-line)
  ;;  (require 'telephone-line-config)
  ;;  (telephone-line-mode t))
#+END_SRC

* mode-icons

#+BEGIN_SRC emacs-lisp
  (use-package mode-icons
    :ensure t
    :config
    (mode-icons-mode))

#+END_SRC

* Volatile-Highlights

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :config
    (volatile-highlights-mode t))
#+END_SRC

* Uniquify For buffer names

  #+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward)
  )

  #+END_SRC

* Formatting and white-space

  #+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode nil)

  #+END_SRC

* Posframe

#+BEGIN_SRC emacs-lisp
(use-package posframe :ensure t)
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package auto-yasnippet
    :ensure t)


  (use-package yasnippet-snippets
    :defer    t
    :straight t)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)

   (when (string= system-type "darwin")
     (setq dired-use-ls-dired t
           insert-directory-program "/usr/local/bin/gls"))
  (setq dired-listing-switches "-aBhl --group-directories-first")
  (use-package dired-narrow
    :ensure t
    :config
    (bind-key "C-c C-n" #'dired-narrow)
    (bind-key "C-c C-f" #'dired-narrow-fuzzy)
    (bind-key "C-x C-N" #'dired-narrow-regexp)
    )

  (use-package dired-subtree
    :ensure t
    :after dired
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))


  (use-package peep-dired
    :ensure t
    :config
    (define-key dired-mode-map (kbd "P") 'peep-dired)
    )

  (use-package dired-single
    :ensure t
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
    )

  (use-package dired-collapse
    :ensure t
    :defer
    :init
    (add-hook 'dired-mode-hook 'dired-collapse-mode))

  (use-package image-dired+
    :ensure t
    :config
    (setq auto-image-file-mode t)
    (eval-after-load 'image-dired+ '(image-diredx-async-mode 1)))

  (use-package dired-filter
    :ensure t
    :init
    (add-hook 'dired-mode-hook 'dired-filter-group-mode)

    :config
    (setq dired-filter-group-saved-groups
          '(("default"
             ("Directories" (directory))
             ("PDF"
              (extension . "pdf"))
             ("LaTeX"
              (extension "tex" "bib"))
             ("Org"
              (extension . "org"))
             ("Archives"
              (extension "zip" "rar" "gz" "bz2" "tar"))
             ("Multimedia"
              (extension "ogg" "flv" "mpg" "avi" "mp4" "mp3"))
             )))
    )

  (use-package dired-rsync
    :defer t
    :ensure t
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))

#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
  ;; projectile
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (counsel-projectile-on))
#+END_SRC

* Smart-Parens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :demand t
    :bind* (("M-m m j" . sp-down-sexp)
            ("M-m m k" . sp-backward-up-sexp)
            ("M-m m h" . sp-backward-down-sexp)
            ("M-m m l" . sp-up-sexp)
            ("M-m m f" . sp-forward-sexp)
            ("M-m m b" . sp-backward-sexp)
            ("M-m m a" . sp-beginning-of-sexp)
            ("M-m m e" . sp-end-of-sexp)
            ("M-m m n" . sp-next-sexp)
            ("M-m m p" . sp-previous-sexp)
            ("M-m m >" . sp-forward-barf-sexp)
            ("M-m m <" . sp-backward-barf-sexp)
            ("M-m m )" . sp-forward-slurp-sexp)
            ("M-m m (" . sp-backward-slurp-sexp)
            ("M-m m x" . sp-transpose-sexp)
            ("M-m m d" . sp-kill-sexp)
            ("M-m m y" . sp-copy-sexp)
            ("M-m m u" . sp-unwrap-sexp)
            ("M-m m U" . sp-backward-unwrap-sexp)
            ("M-m m C" . sp-convolute-sexp)
            ("M-m m r" . sp-raise-sexp)
            ("M-m m s" . sp-split-sexp)
            ("M-m m S" . sp-splice-sexp)
            ("M-m m F" . sp-splice-sexp-killing-forward)
            ("M-m m B" . sp-splice-sexp-killing-backward)
            ("M-m m A" . sp-splice-sexp-killing-around))
    :diminish smartparens-mode
    :diminish smartparens-strict-mode
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    ;;(smartparens-global-strict-mode)
    (show-smartparens-global-mode)
    (which-key-add-key-based-replacements
      "M-m m" "move prefix"))

  (use-package smartparens-config
    :straight smartparens
    :hook ((after-init . show-smartparens-global-mode)
           (after-init . smartparens-global-mode))
    :init (gsetq sp-hybrid-kill-entire-symbol nil))
#+END_SRC

* Font Scaling

#+BEGIN_SRC emacs-lisp
  ;; font scaling
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

  (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (use-package transient
    :ensure t)

  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (setq magit-status-margin
        '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
    "
    Git gutter:
      _j_: next hunk        _s_tage hunk     _q_uit
      _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ^ ^                   _p_opup hunk
      _h_: first hunk
      _l_: last hunk        set start _R_evision
    "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
     :color blue))

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'"
    :mode "\\.git/config\\'"
    :mode "\\.gitmodules\\'")

  (use-package gitignore-mode
    :mode "\\.gitignore\\'"
    :mode "\\.dockerignore\\'"
    :mode "\\..elpaignore\\'")

  (use-package diffview
    :commands (diffview-region diffview-current)
    :preface
    (defun my/diffview-dwim ()
      (interactive)
      (if (region-active-p)
          (diffview-region)
        (diffview-current)))
    :bind ("M-g v" . my/diffview-dwim))

  (use-package smerge-mode
    :diminish
    :preface
    (with-eval-after-load 'hydra
      (defhydra smerge-hydra
        (:color pink :hint nil :post (smerge-auto-leave))
        "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
        ("n" smerge-next)
        ("p" smerge-prev)
        ("b" smerge-keep-base)
        ("u" smerge-keep-upper)
        ("l" smerge-keep-lower)
        ("a" smerge-keep-all)
        ("RET" smerge-keep-current)
        ("\C-m" smerge-keep-current)
        ("<" smerge-diff-base-upper)
        ("=" smerge-diff-upper-lower)
        (">" smerge-diff-base-lower)
        ("R" smerge-refine)
        ("E" smerge-ediff)
        ("C" smerge-combine-with-next)
        ("r" smerge-resolve)
        ("k" smerge-kill-current)
        ("ZZ" (lambda ()
                (interactive)
                (save-buffer)
                (bury-buffer))
         "Save and bury buffer" :color blue)
        ("q" nil "cancel" :color blue)))
    :hook ((find-file . (lambda ()
                          (save-excursion
                            (goto-char (point-min))
                            (when (re-search-forward "^<<<<<<< " nil t)
                              (smerge-mode 1)))))
           (magit-diff-visit-file . (lambda ()
                                      (when smerge-mode
                                        (smerge-hydra/body))))))


  (use-package magit-tbdiff
    :ensure t
    :after magit)

  (use-package magit-todos
    :ensure t
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 100)
    :custom (magit-todos-keywords (list "TODO" "FIXME")))

  (use-package git-commit
    :ensure t
    :defer t)

  (use-package gitattributes-mode
    :ensure t
    :defer t)

  (use-package git-msg-prefix
    :ensure t
    :defer t
    :config
    (setq git-msg-prefix-log-flags " --since='1 week ago' "
          git-msg-prefix-regex "^\\([^:]*: \\)"
          git-msg-prefix-input-method 'ivy-read)
    ;; (add-hook 'git-commit-mode-hook 'git-msg-prefix)
    )

  ;; Github api
  (use-package gh :ensure t)
  (use-package gh-md :ensure t)

  ;; Search on github
  (use-package github-search :ensure t)

  ;; Mapping github with magit
  (use-package ghub :ensure t)
  (use-package ghub+ :ensure t)

  (use-package magithub
    :ensure t
    :after (:all magit ghub ghub+)
    :config (magithub-feature-autoinject t))

  (use-package gist :ensure t)

  (use-package browse-at-remote :ensure t)

#+END_SRC

* Better Shell

#+BEGIN_SRC emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-\"" . better-shell-shell)
           ("C-:" . better-shell-remote-open)))
#+END_SRC

* Dumb Jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g s" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+END_SRC

* Origami folding

#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure quelpa
    :quelpa (origami :repo "seblemaguer/origami.el" :fetcher github)
    :custom
    (origami-show-fold-header t)

    :custom-face
    (origami-fold-replacement-face ((t (:inherit magit-diff-context-highlight))))
    (origami-fold-fringe-face ((t (:inherit magit-diff-context-highlight))))

    :init
    (defhydra origami-hydra (:color blue :hint none)
      "
        _:_: recursively toggle node       _a_: toggle all nodes    _t_: toggle node
        _o_: show only current node        _u_: undo                _r_: redo
        _R_: reset
        "
      (":" origami-recursively-toggle-node)
      ("a" origami-toggle-all-nodes)
      ("t" origami-toggle-node)
      ("o" origami-show-only-node)
      ("u" origami-undo)
      ("r" origami-redo)
      ("R" origami-reset))

    :bind (:map origami-mode-map
                ("C-:" . origami-hydra/body))
    :config
    (face-spec-reset-face 'origami-fold-header-face))
#+END_SRC

* IBUFFER

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

  (use-package ibuffer-tramp
    :ensure t)
#+END_SRC

* Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("<C-M-tab>" . treemacs)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
          ))


  (use-package treemacs-projectile
    :defer t
    :ensure t
    :bind (:map global-map
                ("C-c o p" . treemacs-projectile))
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  ;;(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
#+END_SRC

* Aggresive indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1)
    ;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    )
#+END_SRC

* FZF

#+BEGIN_SRC emacs-lisp
(use-package fzf :ensure t)
#+END_SRC

* RipGrep

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :ensure t)

  (use-package rg
    :ensure t
    :commands rg)
#+END_SRC

* Easy kill

#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC

* PATH

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    )
#+END_SRC

* Wgrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    )
  (use-package wgrep-ag
    :ensure t
    )
  (require 'wgrep-ag)
#+END_SRC

* Regex

#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :ensure t
    :config
    (pcre-mode)
    )
#+END_SRC

* Eyebrowse

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode)
    )
#+END_SRC

* PDF Tools

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (bind-keys :map pdf-view-mode-map
               ("\\" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice))
    (use-package org-pdfview
      :ensure t))

  (defhydra hydra-pdftools (:color blue :hint nil)
    "
                                                                        ╭───────────┐
         Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
     ╭──────────────────────────────────────────────────────────────────┴───────────╯
           ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
           ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
           ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
           ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
      _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
           ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
           ^^_n_^^      ^ ^  _r_eset slice box
           ^^^↓^^^
           ^^_G_^^
     --------------------------------------------------------------------------------
          "
    ("\\" hydra-master/body "back")
    ("<ESC>" nil "quit")
    ("al" pdf-annot-list-annotations)
    ("ad" pdf-annot-delete)
    ("aa" pdf-annot-attachment-dired)
    ("am" pdf-annot-add-markup-annotation)
    ("at" pdf-annot-add-text-annotation)
    ("y"  pdf-view-kill-ring-save)
    ("+" pdf-view-enlarge :color red)
    ("-" pdf-view-shrink :color red)
    ("0" pdf-view-scale-reset)
    ("H" pdf-view-fit-height-to-window)
    ("W" pdf-view-fit-width-to-window)
    ("P" pdf-view-fit-page-to-window)
    ("n" pdf-view-next-page-command :color red)
    ("p" pdf-view-previous-page-command :color red)
    ("d" pdf-view-dark-minor-mode)
    ("b" pdf-view-set-slice-from-bounding-box)
    ("r" pdf-view-reset-slice)
    ("g" pdf-view-first-page)
    ("G" pdf-view-last-page)
    ("e" pdf-view-goto-page)
    ("o" pdf-outline)
    ("s" pdf-occur)
    ("i" pdf-misc-display-metadata)
    ("u" pdf-view-revert-buffer)
    ("F" pdf-links-action-perfom)
    ("f" pdf-links-isearch-link)
    ("B" pdf-history-backward :color red)
    ("N" pdf-history-forward :color red)
    ("l" image-forward-hscroll :color red)
    ("h" image-backward-hscroll :color red))

  (setq pdf-view-use-scaling t)
  (require 'pdf-tools)
  (require 'org-pdfview)
#+END_SRC

* Sunrise Commander

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/sunrise-commander")
;;(require 'sunrise-commander)
;;(require 'sunrise-x-buttons)
;;(require 'sunrise-x-modeline)
;;(add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
#+END_SRC

* EditorConfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

* Yaml Mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    )

  (use-package flycheck-yamllint
    :ensure t
    :defer t
    :init
    (progn
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+END_SRC

* Docker-Mode

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t)

  (use-package docker-tramp
    :ensure t
    )

  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile[^/]*\\'")

  (use-package docker-compose-mode
    :ensure t
    :mode "docker-compose[^/]*\\.yml\\'")
#+END_SRC

* EShell-Enhancements

#+BEGIN_SRC emacs-lisp

  (use-package esh-autosuggest
    :ensure t
    :disabled t
    :hook (eshell-mode . esh-autosuggest-mode))

  (use-package esh-help
    :ensure t
    :defer t
    :config
    (setup-esh-help-eldoc))

  (use-package eshell-prompt-extras
    :ensure t
    :after esh-opt
    :custom
    (eshell-prompt-function #'epe-theme-dakrone))

  (use-package eshell-fringe-status
    :ensure t
    :hook
    (eshell-mode . eshell-fringe-status-mode))

  (use-package eshell-did-you-mean
    :ensure t)

#+END_SRC

* Groovy

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :mode (("\\.groovy" . groovy-mode)
           ("/Jenkinsfile" . groovy-mode))
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))
    (add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))
    (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . groovy-mode)))

  (use-package groovy-imports :ensure t)
  (use-package flycheck-gradle
    :ensure t
    :defer t)
#+END_SRC

* Duplicate Things

#+BEGIN_SRC emacs-lisp
  (use-package duplicate-thing
    :bind ("H-C-e d" . duplicate-thing)
    :ensure t)
#+END_SRC

* Custom Utils

#+Begin_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom-el-scripts/custom-util-function.el")
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Ensime/Scala/Sbt

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :pin melpa)

  (use-package sbt-mode
    :ensure t
    :pin melpa)

  (use-package scala-mode
    :ensure t
    :pin melpa)
#+END_SRC

* Java

#+BEGIN_SRC emacs-lisp
 (load-if-exists "~/.emacs.d/custom-el-scripts/init-java.el")
#+END_SRC

* Auto-revert

#+BEGIN_SRC emacs-lisp
;; Automatically reload files was modified by external program
(use-package autorevert
  :ensure nil
  :diminish
  :hook (after-init . global-auto-revert-mode))
#+END_SRC

* Save Place/ Recentf

#+BEGIN_SRC emacs-lisp
;; History
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))

;; Recent files
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 20000000)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     "cache"
                     "recentf"
                     "COMMIT_EDITMSG\\'"))
  :preface
  (defun my/recentf-save-list-silence ()
    (interactive)
    (let ((message-log-max nil))
      (if (fboundp 'shut-up)
          (shut-up (recentf-save-list))
        (recentf-save-list)))
    (message ""))
  (defun my/recentf-cleanup-silence ()
    (interactive)
    (let ((message-log-max nil))
      (if shutup-p
          (shut-up (recentf-cleanup))
        (recentf-cleanup)))
    (message ""))
  :hook
  (focus-out-hook . (my/recentf-save-list-silence my/recentf-cleanup-silence)))
#+END_SRC

* AG - The silver searcher

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :custom
    (ag-highligh-search t)
    (ag-reuse-buffers t)
    (ag-reuse-window t)
    :bind
    ("H-M-p a" . ag-project)
    :config
    (use-package wgrep-ag))
#+END_SRC

* MWIM

#+BEGIN_SRC emacs-lisp
  (use-package mwim
    :ensure t
    :bind
    ("H-C-g a" . mwim-beginning-of-code-or-line)
    ("H-C-g e" . mwim-end-of-code-or-line))
#+END_SRC

* Google-this

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t)
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp

(use-package dashboard
  :ensure t
  :diminish
  (dashboard-mode page-break-lines-mode)
  :custom
  (dashboard-center-content t)
  (dashboard-startup-banner 2)
  (dashboard-items '((recents . 15)
                     (projects . 5)
                     (bookmarks . 5)))
  :custom-face
  (dashboard-heading ((t (:foreground "#f1fa8c" :weight bold))))
  :hook
  (after-init . dashboard-setup-startup-hook))

#+END_SRC

* Dimmer

#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :disabled
    :custom
    (dimmer-fraction 0.5)
    (dimmer-exclusion-regexp-list
     '(".*Minibuf.*"
       ".*which-key.*"
       ".*Messages.*"
       ".*Async.*"
       ".*Warnings.*"
       ".*LV.*"
       ".*Ilist.*"))
    :config
    (dimmer-mode t))
#+END_SRC

* Rainbow

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))

#+END_SRC

* Kubernates

#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview))

  ;; If you want to pull in the Evil compatibility package.
  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)

  (use-package k8s-mode
    :ensure t
    :hook (k8s-mode . yas-minor-mode))

  (use-package kubernetes-tramp
    :ensure t)
#+END_SRC

* Json

#+BEGIN_SRC emacs-lisp
  ;;; Languages
  (use-package js2-mode                   ; Javascript
    :ensure t
    :mode (("\\.jsx?\\'" . js2-mode))
    :commands (j2-mode))

  (use-package json-mode                  ; JSON
    :ensure t
    :mode (("\\.json\\'" . json-mode))
    :commands (json-mode))

  (use-package json-navigator
    :ensure t)

  (use-package web-beautify
    :ensure t)

#+END_SRC

* Csv Mode

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :mode "\\.[Cc][Ss][Vv]\\'"
    :config (setq csv-separators '("," ";" "|" " ")))
#+END_SRC

* Indentation-tools

#+BEGIN_SRC emacs-lisp
  (use-package indent-tools
    :ensure t)
#+END_SRC

* Move-text

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :bind
    (("M-<up>" . move-text-up)
     ("M-<down>" . move-text-down)))
#+END_SRC

* Quick-run

#+BEGIN_SRC emacs-lisp
  (use-package quickrun
    :ensure t
    :bind
    (("<f7>r r" . quickrun)
     ("<f7>r c". quickrun-compile-only)))

  (defhydra my/hydra-quickrun (:color blue
                                      :hint nil)
    "
   _s_: quickrun     _a_: with arg    _c_: compile only       _q_: quit
   _r_: run region   _S_: shell       _R_: replace region
  "
    ("s" quickrun)
    ("r" quickrun-region)
    ("a" quickrun-with-arg)
    ("S" quickrun-shell)
    ("c" quickrun-compile-only)
    ("R" quickrun-replace-region)
    ("q" nil :color blue))

  (bind-keys*
   ("M-m s q" . my/hydra-quickrun/body))
#+END_SRC

* Auto-update packages

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

* Evil-numbers

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t)

  (global-set-key (kbd "C-c C-i +") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C-c C-i -") 'evil-numbers/dec-at-pt)

  (define-key evil-normal-state-map (kbd "C-c C-i +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c C-i -") 'evil-numbers/dec-at-pt)
#+END_SRC

* Evil Lion mode
#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
;; See Doc - https://github.com/edkolev/evil-lion
#+END_SRC

* Evil Exchange

#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :ensure t)
#+END_SRC

* Goto last change

#+BEGIN_SRC emacs-lisp
(use-package goto-chg
  :ensure t
  :bind* (("M-m g ;" . goto-last-change)
          ("M-m g ," . goto-last-change-reverse)))
#+END_SRC

* Ztree

#+BEGIN_SRC emacs-lisp
(use-package ztree
  :ensure t
  :bind* (("M-m g v" . ztree-dir)
          ("M-m g V" . ztree-diff))
  :init
  (setq ztree-dir-move-focus t))
#+END_SRC

* GG_Tags

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :diminish ggtags-mode
  :bind* (("M-m T"   . ggtags-find-tag-regexp)
          ("M-m g t" . ggtags-create-tags)
          ("M-m g T" . ggtags-update-tags))
  :init
  (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
  :config
  (add-hook 'prog-mode-hook 'ggtags-mode))
#+END_SRC

* Dash at point

#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :ensure t
  :bind (("C-c I" . dash-at-point))
  :bind* (("M-m SPC i" . dash-at-point-with-docset)
          ("M-m SPC I" . dash-at-point)))
#+END_SRC

* Commenting

#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :ensure t
  :bind* (("M-m g c" . comment-dwim-2)))
#+END_SRC

* Cycle-quotes

#+BEGIN_SRC emacs-lisp
(use-package cycle-quotes
  :ensure t
  :bind* (("M-m s q" . cycle-quotes)))

(which-key-add-key-based-replacements
  "s q" "switch quotes")

#+END_SRC

* Highlight Indentation

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :ensure t
  :commands (highlight-indentation-mode))
#+END_SRC

* Region State

#+BEGIN_SRC emacs-lisp
(use-package region-state
  :ensure t
  :config
  (region-state-mode))
#+END_SRC

* Google This

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :commands (google-this-word
               google-this-region
               google-this-symbol
               google-this-clean-error-string
               google-this-line
               google-this-search
               google-this-cpp-reference))

  (defun my/google-this ()
    "Google efficiently"
    (interactive)
    (if (region-active-p)
        (google-this-region 1)
      (google-this-symbol 1)))

  (bind-keys*
    ("M-m A" . my/google-this))

  (defhydra my/hydra-google (:color blue
                             :hint nil)
    "
   _w_: word   _r_: region    _v_: symbol   _l_: line
   _g_: google _c_: cpp       _s_: string   _q_: quit
   "
    ("w" google-this-word)
    ("r" google-this-region)
    ("v" google-this-symbol)
    ("s" google-this-clean-error-string)
    ("l" google-this-line)
    ("g" google-this-search)
    ("c" google-this-cpp-reference)
    ("q" nil :color blue))

  (bind-keys*
    ("M-m g G" . my/hydra-google/body))
#+END_SRC

* browse-at-remote

#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :ensure t
  :bind* (("M-m g i" . browse-at-remote)
          ("M-m g I" . browse-at-remote-kill)))
#+END_SRC

* discover-my-major

#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :ensure t
  :bind (("C-h C-m" . discover-my-major)
         ("C-h M-m" . discover-my-mode)))
#+END_SRC

* Memory usage

#+BEGIN_SRC emacs-lisp
  (use-package memory-usage               ; Analyse the memory usage of Emacs
    :ensure t
    :commands (memory-usage))
#+END_SRC

* FAPP

#+BEGIN_SRC emacs-lisp
(use-package ffap                       ; Find files at point
  :bind ("C-c f p" . ffap)
  :config (setq ffap-machine-p-known 'reject))
#+END_SRC

* No-Littering

#+BEGIN_SRC emacs-lisp
  (use-package no-littering               ; Keep .emacs.d clean
    :ensure t
    :config (progn
              (require 'recentf)
              (add-to-list 'recentf-exclude no-littering-etc-directory)
              (add-to-list 'recentf-exclude no-littering-var-directory)
              (setq create-lockfiles nil
                    delete-old-versions t
                    kept-new-versions 6
                    kept-old-versions 2
                    version-control t)))
#+END_SRC

* Evil Collection

#+BEGIN_SRC emacs-lisp
 ;; (use-package evil-collection
 ;;   :ensure t
 ;;   :after (evil)
 ;;   :config
 ;;   ;;(setq evil-collection-mode-list '(dired))
 ;;   (evil-collection-init))
#+END_SRC

* LogView

#+BEGIN_SRC emacs-lisp
  (use-package logview
    :ensure t
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'")
    :config
    (setq datetime-timezone 'UTC
          logview-additional-level-mappings '(("ICP"
                                               (error       "ERROR")
                                               (warning     "WARNING")
                                               (information "INFO")
                                               (debug       "DEBUG")
                                               (trace       "TRACE")))
          logview-additional-timestamp-formats '(("easyloggingpp" (java-pattern . "HH:mm:ss,SSS")))
          logview-additional-submodes '(("ICP" . ((format . "TIMESTAMP LEVEL ")
                                                  (levels . "ICP")
                                                  (timestamp . ("easyloggingpp"))))))
    )
#+END_SRC

* Paradox

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure t
  :defer t
  :config
  (setq paradox-spinner-type 'progress-bar
        paradox-execute-asynchronously t))
#+END_SRC

* snapshot-timemachine

#+BEGIN_SRC emacs-lisp
  (use-package snapshot-timemachine
    :ensure t
    :init

    ;; Default Backup directory
    (defvar backup-directory "~/.emacs.d/backups/")
    (setq backup-directory-alist `((".*" . ,backup-directory)))

    (when (not (file-exists-p backup-directory))
      (make-directory backup-directory t))

    ;; Auto-save
    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))

    ;; Tramp backup
    (defvar tramp-backup-directory "~/.emacs.d/tramp-backups/")
    (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

    (when (not (file-exists-p tramp-backup-directory))
      (make-directory tramp-backup-directory t))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    :config

    (defun snapshot-timemachine-backup-finder (file)
      "Find snapshots of FILE in rsnapshot backups."
      (let* ((file (expand-file-name file))
             (file-adapted (replace-regexp-in-string "/" "!" file))
             (backup-files(directory-files backup-directory t (format "%s.*" file-adapted))))
        (seq-map-indexed (lambda (backup-file index)
                           (make-snapshot :id index
                                          :name (format "%d" index)
                                          :file backup-file
                                          :date (nth 5 (file-attributes backup-file))))
                         backup-files)))

    (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+END_SRC

* XML

#+BEGIN_SRC emacs-lisp
 ;; (use-package nxml-mode
 ;;   :ensure t
 ;;   :mode ("\\.xml$" . nxml-mode)
 ;;   :commands (pretty-print-xml-region)
 ;;   :defer t
 ;;   :init
 ;;   ;; Mapping xml to nxml
 ;;   (fset 'xml-mode 'nxml-mode)

 ;;   :config

 ;;   ;; Global configuration
 ;;   (setq nxml-child-indent 2
 ;;         nxml-auto-insert-xml-declaration-flag t
 ;;         nxml-slash-auto-complete-flag t
 ;;         nxml-bind-meta-tab-to-complete-flag t)

 ;;   ;; Outline hook
 ;;   (add-hook 'nxml-mode-hook
 ;;             (lambda ()
 ;;               (outline-minor-mode)
 ;;               (setq outline-regexp "^[ \t]*\<[a-zA-Z]+")))

 ;;   ;; Helper to format
 ;;   (defun my/pretty-print-xml-region (begin end)
 ;;     "Pretty format XML markup in region. You need to have nxml-mode
 ;; http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
 ;; this.  The function inserts linebreaks to separate tags that have
 ;; nothing but whitespace between them.  It then indents the markup
 ;; by using nxml's indentation rules."
 ;;     (interactive "r")
 ;;     (save-excursion
 ;;       (nxml-mode)
 ;;       (goto-char begin)
 ;;       (while (search-forward-regexp "\>[ \\t]*\<" nil t)
 ;;         (backward-char) (insert "\n"))
 ;;       (indent-region begin end))))
#+END_SRC

* Gradle

#+BEGIN_SRC emacs-lisp
(use-package gradle-mode
  :ensure t
  :config
  (setq gradle-gradlew-executable "./gradlew"
        gradle-use-gradlew t)
  (gradle-mode))
#+END_SRC

* Winnow

#+BEGIN_SRC emacs-lisp
(use-package winnow
  :ensure t
  :init
  (add-hook 'compilation-mode-hook 'winnow-mode)
  (add-hook 'ag-mode-hook 'winnow-mode))
#+END_SRC

* Images

#+BEGIN_SRC emacs-lisp
(use-package image+
  :ensure t
  :init
  (add-hook 'image-mode-hook
            '(lambda ()
               (require 'image+)
               (imagex-sticky-mode)))

  :bind (:map image-mode-map
              ("=" . imagex-sticky-zoom-in)
              ("-" . imagex-sticky-zoom-out)
              ("m" . imagex-sticky-maximize)
              ("g" . imagex-sticky-restore-original)
              ("S" . imagex-sticky-save-image)
              ("r" . imagex-sticky-rotate-right)
              ("l" . imagex-sticky-rotate-left)
              ("/" . imagex-sticky-binding/body))

  :config
    (defhydra imagex-sticky-binding () ;; global-map "C-x C-l")
    "Manipulating Image"
    ("+" imagex-sticky-zoom-in "zoom in")
    ("-" imagex-sticky-zoom-out "zoom out")
    ("M" imagex-sticky-maximize "maximize")
    ("O" imagex-sticky-restore-original "restore original")
    ("S" imagex-sticky-save-image "save file")
    ("r" imagex-sticky-rotate-right "rotate right")
    ("l" imagex-sticky-rotate-left "rotate left")))
#+END_SRC

* System Monitoring

#+BEGIN_SRC emacs-lisp
(use-package symon
  :ensure t
  :defer t)
#+END_SRC

* Page-break-lines

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+END_SRC

* BM--For Bookmarks

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)


    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


    ;; :bind (("H-b n" . bm-next)
    ;;        ("H-b p" . bm-previous)
    ;;        ("H-b b" . bm-toggle))


    (bind-key "C-c h b"
              (defhydra hydra-bm (:color pink
                                         :hint nil
                                         :body-pre (when (not (use-region-p))
                                                     (push-mark)))
                "
  Bookmark  _n_ext (_N_ in lifo order)            _b_ toggle bookmark        _l_ bm list                                            _s_ toggle persistence
            _p_revious (_P_ in lifo order)        _a_nnotate               _x_/_X_ remove all bm from current/all buffer(s)
            show _A_nnotation                     _M_ toggle bookmark       _L_ bm list all
  "
                ("b"   bm-toggle)
                ("M"   bm-toggle :color blue)
                ("a"   bm-bookmark-annotate :color blue)
                ("A"   bm-bookmark-show-annotation)
                ("n"   bm-common-next)
                ("N"   bm-lifo-next)
                ("l"   bm-show)
                ("L"   bm-show-all)
                ("p"   bm-common-previous)
                ("P"   bm-lifo-previous)
                ("s"   bm-toggle-buffer-persistence)
                ("x"   bm-remove-all-current-buffer :color blue)
                ("X"   bm-remove-all-all-buffers :color blue)
                ("r"   pop-to-mark-command :color blue)
                ("RET" nil "cancel" :color blue)
                ("q"   nil "cancel" :color blue)))
    )
#+END_SRC

#+END_SRC

* Popup

#+BEGIN_SRC emacs-lisp
  (use-package popup :ensure t :defer t)
  (use-package popwin :ensure t
               :config
               (popwin-mode 1)
               (setq popwin:close-popup-window-timer-interval 0.1)
               (setq popwin:close-popup-window-timer nil))
#+END_SRC

* Point History

#+BEGIN_SRC emacs-lisp
  (use-package point-history
    :straight (point-history :type git :host github :repo "blue0513/point-history")
    :hook ((after-init . point-history-mode))
    :bind (("C-c C-/" . point-history-show))
    :init (gsetq point-history-ignore-buffer "^ \\*Minibuf\\|^ \\*point-history-show*"))
#+END_SRC

* Undo Propose

#+BEGIN_SRC emacs-lisp

  (use-package undo-propose
    :straight t
    :config (undo-propose-wrap redo))
#+END_SRC
